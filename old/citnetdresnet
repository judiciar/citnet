#!/usr/bin/env python3

# FOLOSIRE
# citnetd <incoming port> <neural network modelname.hdf5>
# citnetd 1102 modelname.hdf5

# importa pachetele necesare
# foloseste keras<=2.2.5, tensorflow<=1.14 si efficientnet=1.0.0
import warnings
with warnings.catch_warnings():
    warnings.filterwarnings("ignore", category=FutureWarning)
    import tensorflow as tf
    from keras.preprocessing.image import img_to_array
    from keras.models import load_model
from os.path import splitext, basename, dirname, isfile
from os import remove, chdir
from flask import Flask, request
import numpy as np
import bjoern
import cv2
import subprocess
import sys
import time

default_modelfile = (
    "/home/localadmin/citnet/resnet-15.11-acc1.0000-val_acc1.0000bun.hdf5"
)
default_port = 1102
default_tempfolder = "/home/localadmin/citnet/temp/"


def shareinstanta(argument):
    switcher = {
        "0": "/mnt/cagl/",
        "1": "/mnt/cagldoc/",
        "2": "/mnt/trgl/",
        "3": "/mnt/jdgl/",
        "4": "/mnt/jdtecuci/",
        "5": "/mnt/jdtgb/",
        "6": "/mnt/jdliesti/",
        "7": "/mnt/trvn/",
        "8": "/mnt/jdfocsani/",
        "9": "/mnt/jdpanciu/",
        "10": "/mnt/jdadjud/",
        "11": "/mnt/br/TrBraila/",
        "12": "/mnt/br/JdBraila/",
        "13": "/mnt/jdfaurei/",
    }
    return switcher.get(argument, "error")


def citnet(robot, idinstanta, pathfile, model):
    # verifica daca fisierul exista si converteste calea pentru linux si mounted share
    pathfile = pathfile.replace("\\", "/")
    if not isfile(pathfile):
        partialname = basename(dirname(pathfile)) + "/" + basename(pathfile)
        if idinstanta == "1" and robot == "cit" and pathfile.find("10.20.48.97") == -1:
            idinstanta = "0"
        cale = shareinstanta(idinstanta)
        if cale == "error":
            print(
                "robot:{} idinstanta:{}=eroare \n {}".format(
                    robot, idinstanta, pathfile
                )
            )
            return "nofile"
        pathfile = cale + partialname
        if not isfile(pathfile):  # verifica calea din nou dupa conversie
            print(
                "robot:{} idinstanta:{} \n {} = nofile".format(
                    robot, idinstanta, pathfile
                )
            )
            return "nofile"

    # conversia fisierului PDF
    fname = basename(pathfile)  # salveaza numele fisierului fara cale
    p = subprocess.Popen(
        'cp -f "'
        + pathfile
        + '" .;'
        + 'convert xc:white[64x128\!] -respect-parenthesis \( "'
        + fname
        + '"[0-1] -resize 595x842\> -background white -extent 595x842 -resize 64x64! -append \) -composite -set colorspace Gray -depth 8 -strip "'
        + splitext(fname)[0]
        + '.tif"',
        shell=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
    )
    for line in p.stdout.readlines():
        print(line.decode("utf-8"))
    p.wait()

    # incarca imaginea
    orig = cv2.imread(splitext(fname)[0] + ".tif", cv2.IMREAD_GRAYSCALE)
    # preproceseaza imaginea (dimensiunea trebuie sa fie 64x128 pixeli),
    # intensitatea pixelilor urmand a fi redimensionata in intervalul [0, 1]
    image = orig.astype("float") / 255.0
    # image = cv2.resize(image, (64, 128))
    # ordoneaza canalele imaginii (canalele la inceput sau canalele la sfarsit)
    # in functie de Keras backend, dupa care adauga o dimensiune batch imaginii
    image = img_to_array(image)
    image = np.expand_dims(image, axis=0)

    # evalueaza imaginea cu ajutorul retelei neur(on)ale
    with graph.as_default():
        pred = model.predict(image)
    # pred[0][0] este probabilitatea de 'citatii',
    # pred[0][1] este probabilitatea de 'documente'
    label = "documente" if pred[0][0] <= 0.5 else "citatii"
    print(
        "robot:{} idinstanta:{} \n {} - {} scor: {:.4f}".format(
            robot, idinstanta, pathfile, label, pred[0][np.argmax(pred[0])]
        )
    )
    remove(fname)
    remove(splitext(fname)[0] + ".tif")
    return label


app = Flask(__name__)


@app.route("/query")
def query():
    tinitial = time.time()
    robot = str(request.args.get("robot"))
    idinstanta = str(request.args.get("idinstanta"))
    pathfile = str(request.args.get("pathfile"))
    try:
        response = citnet(robot, idinstanta, pathfile, model)
    except:
        response = "citnetError"
        print(
            "robot:{} idinstanta:{} \n {} {}".format(
                robot, idinstanta, pathfile, response
            )
        )
    print(" am raspuns in {:.3f} secunde".format(time.time() - tinitial))
    return response


if __name__ == "__main__":
    # verifica argumentele din linia de comanda
    if len(sys.argv) == 3:
        port, modelfile = int(sys.argv[1]), sys.argv[2]
    else:
        port, modelfile = default_port, default_modelfile
        print(
            "[INFO] argumente insuficiente furnizate. Folosesc valorile default:\n port:",
            port,
            "modelfile:",
            modelfile,
        )
    if not isfile(modelfile):
        print("Nu am gasit", modelfile)
        sys.exit(2)

    # intra in directorul de lucru
    chdir(default_tempfolder)

    # incarca reteaua neur(on)ala
    print("[INFO] incarc reteaua neur(on)ala CitNet")
    global graph
    graph = tf.get_default_graph()
    model = load_model(modelfile)

    # ruleaza server bjoern cu app flask
    print("[INFO] astept conexiuni pe portul", port)
    bjoern.run(app, "0.0.0.0", port)
